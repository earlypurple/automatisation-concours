// tests/integration_test.js

const AutoParticipation = require('../js/autoParticipation.js');
const Analytics = require('../js/analytics.js');
const NotificationManager = require('../js/notifications.js');
const EmailReportManager = require('../js/emailReports.js');

async function runIntegrationTest() {
    console.log('üöÄ D√©marrage des tests d\'int√©gration...\n');

    // Initialisation des composants
    const auto = new AutoParticipationManager();
    const analytics = new Analytics();
    const notifications = new NotificationManager();
    const emailReports = new EmailReportManager();

    try {
        // Test 1: Simulation d'une journ√©e compl√®te
        console.log('Test 1: Simulation d\'une journ√©e compl√®te');
        
        // Configuration de l'auto-participation
        auto.updateConfig({
            maxParticipationsPerDay: 10,
            delayBetween: 1000, // 1 seconde pour le test
            safeMode: true
        });

        // D√©marrage de l'auto-participation
        await auto.start();
        console.log('‚úÖ Auto-participation d√©marr√©e');

        // Attente et v√©rification des participations
        await new Promise(resolve => setTimeout(resolve, 5000));
        const stats = auto.getStats();
        console.log(`‚úÖ ${stats.participationsToday} participations effectu√©es`);

        // Test 2: V√©rification des analytics
        console.log('\nTest 2: V√©rification des analytics');
        const analyticsStats = analytics.getStats();
        console.log(`‚úÖ Statistiques g√©n√©r√©es : ${analyticsStats.total.participations} participations totales`);

        // Test 3: Envoi de notifications
        console.log('\nTest 3: Test des notifications');
        await notifications.showNotification('Test R√©ussi', {
            body: 'Notification de test',
            type: 'success'
        });
        console.log('‚úÖ Notification envoy√©e');

        // Test 4: G√©n√©ration de rapport
        console.log('\nTest 4: G√©n√©ration de rapport email');
        const report = await emailReports.generateReport();
        console.log('‚úÖ Rapport g√©n√©r√©');

        // Test 5: Test de charge
        console.log('\nTest 5: Test de charge');
        const promises = [];
        for (let i = 0; i < 10; i++) {
            promises.push(auto.processNextOpportunity());
        }
        await Promise.all(promises);
        console.log('‚úÖ Test de charge r√©ussi');

        // Nettoyage
        auto.stop();
        console.log('\n‚ú® Tests d\'int√©gration termin√©s avec succ√®s!');

    } catch (error) {
        console.error('‚ùå Erreur pendant les tests:', error);
        process.exit(1);
    }
}

// Ex√©cution des tests
runIntegrationTest();
